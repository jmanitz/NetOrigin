candidate.thres <- 0.3
result1 <- compute.mu.lambda(train.data, obs.vec, candidate.thres)
## (2) prepare inputs for 'infer.source.bayesian'
library(R.matlab)
rawnet <- readMat(paste0(dir.rfiles, "KZN_dataset.mat"))
R0 <- readMat(paste0(dir.rfiles, "R0.mat"))$R0
cases.node.day <- rawnet$cases.node.day
dim(cases.node.day)
thres.vec <- round(rawnet$POP.node) * 0.001
obs.vec <- obs9.puredegree
mu.mat <- result1$mu.mat
lambda.list <- result1$lambda.list
poss.candidate.vec <- result1$poss.candidate.vec
prior <- R0
result2.df <- infer.source.bayesian(cases.node.day,
thres.vec,
obs.vec,
mu.mat, lambda.list,
poss.candidate.vec,
prior, TRUE)
result2.df
## (3) prepare trained data as input
POP_node = round(rawnet$POP.node)
POP_node
nnodes=length(POP_node) # number of nodes
nnodes
dim(rawnet$distances)
distances = rawnet$distances # 851-851
fluxes=exp(-distances/D)*diag(POP_node)
-distances/D
distances
D
D=50
fluxes=exp(-distances/D)*diag(POP_node)
diag(fluxes)
fluxes=exp(-distances/D)*diag(POP_node)
diag(fluxes)=0
diag(fluxes)
humanmob.mass <- readMat(paste0(dir.rfiles, 'human_mob_in_851.mat'))$fluxes
rowSums(humanmob.mass)
colSums(humanmob.mass)
fluxes=exp(-distances/D)*diag(POP_node)
diag(fluxes)=0
fluxes=apply(fluxes, 1, function(x){x/sum(x)})
rowSums(fluxes)
colSums(fluxes)
fluxes=apply(fluxes, 2, function(x){x/sum(x)})
fluxes=exp(-distances/D)*diag(POP_node)
diag(fluxes)=0
fluxes=apply(fluxes, 2, function(x){x/sum(x)})
rowSums(fluxes)
distances = rawnet$distances # 851-851
fluxes=exp(-distances/D)*diag(POP_node)
diag(fluxes)=0
fluxes=apply(fluxes, 2, function(x){x/sum(x)})
rowSums(fluxes)
colSums(fluxes)
rowSums(humanmob.mass)
colSums(humanmob.mass)
fluxes=exp(-distances/D)*diag(POP_node)
diag(fluxes)=0
fluxes=apply(fluxes, 1, function(x){x/sum(x)})
rowSums(fluxes)
fluxes=exp(-distances/D)*diag(POP_node)
diag(fluxes)=0
mat_rowsum_flux = matrix(rep(rowSums(fluxes), 851), 851, 851)
fluxes=fluxes/mat_rowsum_flux
rowSums(fluxes)
colSums(fluxes)
humanmob.mass
colSums(humanmob.mass)
colSums(fluxes)
sum(sum(abs(fluxes-humanmob.mass)))
matrix(rep(c(1,2),2),2,2)
rowSums(fluxes)
POP_node = round(rawnet$POP.node) # use integer number
nnodes=length(POP_node) # number of nodes
mu=1/(65*365)      #population natality and mortality rate (day^-1)
gamma=0.2          #rate at which people recover from cholera (day^-1)
alpha=0            #cholera induced mortality rate (day^-1)
mu_B=0.2           #death rate of V.cholerae in the aquatic environment (day^-1)
rho=0              #immunity loss rate (day^-1)
beta_max=1         #maximum contact contact rate (day^-1)
sigma=0.05         #symptomatic ratio: fraction of infected people that develop symptoms and are infective. The remaining fraction enters directly the recovered compartment
R0_max=20          #maximum reproduction number
D=50
m=0.3
no_water_access = rawnet$no.water.access
no_toilet_access = rawnet$no.toilet.access
distances = rawnet$distances # 851-851
##
theta_max=R0_max*(mu_B)*(gamma+alpha+mu)/(beta_max*sigma) #maximum contamination rate
beta=beta_max*no_water_access
theta=theta_max*no_toilet_access
R0=theta*beta*sigma/(mu_B*(gamma+alpha+mu))
fluxes=exp(-distances/D)*diag(POP_node)
diag(fluxes)=0
mat_rowsum_flux = matrix(rep(rowSums(fluxes), 851), 851, 851)
fluxes=fluxes/mat_rowsum_flux
rowSums(fluxes)
colSums(fluxes)
colSums(humanmob.mass)
diag(POP_node)
pop_matrix=matrix(0, 851, 851)
diag(pop_matrix)=POP_node
fluxes=exp(-distances/D)*pop_matrix
diag(fluxes)=0
mat_rowsum_flux = matrix(rep(rowSums(fluxes), 851), 851, 851)
fluxes=fluxes/mat_rowsum_flux
rowSums(fluxes)
pop_matrix=matrix(0, 851, 851)
diag(pop_matrix)=POP_node
pop_matrix
diag(pop_matrix)
fluxes=exp(-distances/D)*pop_matrix
pop_matrix=matrix(0, 851, 851)
diag(pop_matrix)=POP_node
fluxes=exp(-distances/D)%*%pop_matrix
diag(fluxes)=0
mat_rowsum_flux = matrix(rep(rowSums(fluxes), 851), 851, 851)
fluxes=fluxes/mat_rowsum_flux
pop_matrix=matrix(0, 851, 851)
diag(pop_matrix)=POP_node
fluxes=exp(-distances/D)%*%pop_matrix
diag(fluxes)=0
mat_rowsum_flux = matrix(rep(rowSums(fluxes), 851), 851, 851)
fluxes=fluxes/mat_rowsum_flux
rowSums(fluxes)
colSums(fluxes)
node_in=c(428, 432) #initially infected node
in_prevalence=0.001 #initial prevalence of symptomatic infected
#initial condition row: state variables, column: node
#state variables 1:Susceptible, 2:Infected, 3:recovered, 4:Baceria conc., 5:cumulative cases
initial_infected=round(POP_node[node_in]*in_prevalence)
initial_infected
initial_recovered=round(((1-sigma)/sigma)*initial_infected)
initial_recovered
y0=matrix(0, 5, nnodes)
y0[1,:]=POP_node;  #susceptible
y0[1,]=POP_node;  #susceptible
y0
## (3) prepare trained data as input, simulator
POP_node = round(rawnet$POP.node) # use integer number
nnodes=length(POP_node) # number of nodes
mu=1/(65*365)      #population natality and mortality rate (day^-1)
gamma=0.2          #rate at which people recover from cholera (day^-1)
alpha=0            #cholera induced mortality rate (day^-1)
mu_B=0.2           #death rate of V.cholerae in the aquatic environment (day^-1)
rho=0              #immunity loss rate (day^-1)
beta_max=1         #maximum contact contact rate (day^-1)
sigma=0.05         #symptomatic ratio: fraction of infected people that develop symptoms and are infective. The remaining fraction enters directly the recovered compartment
R0_max=20          #maximum reproduction number
D=50
m=0.3
no_water_access = rawnet$no.water.access
no_toilet_access = rawnet$no.toilet.access
distances = rawnet$distances # 851-851
## initial condition
node_in=c(428, 432) #initially infected node
in_prevalence=0.001 #initial prevalence of symptomatic infected
#initial condition row: state variables, column: node
#state variables 1:Susceptible, 2:Infected, 3:recovered, 4:Baceria conc., 5:cumulative cases
initial_infected=round(POP_node[node_in]*in_prevalence)
initial_recovered=round(((1-sigma)/sigma)*initial_infected)
y0=matrix(0, 5, nnodes)
y0[1,]=POP_node  #susceptible
y0[1,node_in]=y0[1,node_in]-(initial_infected+initial_recovered)
y0[2,node_in]=initial_infected
y0[3,node_in]=initial_recovered
y0[4,node_in]=theta[node_in]*in_prevalence/mu_B  #bacteria concentration in equilibrium with infected individuals
y0[5,node_in]=initial_infected
# time for simulation [day]
time_sim=seq(0, 100, by=0.1)
##
theta_max=R0_max*(mu_B)*(gamma+alpha+mu)/(beta_max*sigma) #maximum contamination rate
beta=beta_max*no_water_access
theta=theta_max*no_toilet_access
R0=theta*beta*sigma/(mu_B*(gamma+alpha+mu))
pop_matrix=matrix(0, 851, 851)
diag(pop_matrix)=POP_node
fluxes=exp(-distances/D)%*%pop_matrix
diag(fluxes)=0
mat_rowsum_flux = matrix(rep(rowSums(fluxes), 851), 851, 851)
fluxes=fluxes/mat_rowsum_flux
y0
y0[2,]
y0[3,]
y0[4,]
## (3) prepare trained data as input, simulator
POP_node = round(rawnet$POP.node) # use integer number
nnodes=length(POP_node) # number of nodes
mu=1/(65*365)      #population natality and mortality rate (day^-1)
gamma=0.2          #rate at which people recover from cholera (day^-1)
alpha=0            #cholera induced mortality rate (day^-1)
mu_B=0.2           #death rate of V.cholerae in the aquatic environment (day^-1)
rho=0              #immunity loss rate (day^-1)
beta_max=1         #maximum contact contact rate (day^-1)
sigma=0.05         #symptomatic ratio: fraction of infected people that develop symptoms and are infective. The remaining fraction enters directly the recovered compartment
R0_max=20          #maximum reproduction number
D=50
m=0.3
no_water_access = rawnet$no.water.access
no_toilet_access = rawnet$no.toilet.access
distances = rawnet$distances # 851-851
## initial condition
node_in=c(428, 432) #initially infected node
in_prevalence=0.001 #initial prevalence of symptomatic infected
#initial condition row: state variables, column: node
#state variables 1:Susceptible, 2:Infected, 3:recovered, 4:Baceria conc., 5:cumulative cases
initial_infected=round(POP_node[node_in]*in_prevalence)
initial_recovered=round(((1-sigma)/sigma)*initial_infected)
y0=matrix(0, 5, nnodes)
y0[1,]=POP_node  #susceptible
y0[1,node_in]=y0[1,node_in]-(initial_infected+initial_recovered)
y0[2,node_in]=initial_infected
y0[3,node_in]=initial_recovered
y0[4,node_in]=theta[node_in]*in_prevalence/mu_B  #bacteria concentration in equilibrium with infected individuals
y0[5,node_in]=initial_infected
# time for simulation [day]
time_sim=seq(0, 100, by=0.1)
##
theta_max=R0_max*(mu_B)*(gamma+alpha+mu)/(beta_max*sigma) #maximum contamination rate
beta=beta_max*no_water_access
theta=theta_max*no_toilet_access
R0=theta*beta*sigma/(mu_B*(gamma+alpha+mu))
pop_matrix=matrix(0, 851, 851)
diag(pop_matrix)=POP_node
fluxes=exp(-distances/D)%*%pop_matrix
diag(fluxes)=0
mat_rowsum_flux = matrix(rep(rowSums(fluxes), 851), 851, 851)
fluxes=fluxes/mat_rowsum_flux
time_sim
# source function files
dir.rfiles <- "/Users/lijun/Documents/source_detect_2020/storage/"
rawnet <- readMat(paste0(dir.rfiles, "KZN_dataset.mat"))
POP_node = round(rawnet$POP.node) # use integer number
nnodes=length(POP_node) # number of nodes
mu=1/(65*365)      #population natality and mortality rate (day^-1)
gamma=0.2          #rate at which people recover from cholera (day^-1)
alpha=0            #cholera induced mortality rate (day^-1)
mu_B=0.2           #death rate of V.cholerae in the aquatic environment (day^-1)
rho=0              #immunity loss rate (day^-1)
beta_max=1         #maximum contact contact rate (day^-1)
sigma=0.05         #symptomatic ratio: fraction of infected people that develop symptoms and are infective. The remaining fraction enters directly the recovered compartment
R0_max=20          #maximum reproduction number
D=50
m=0.3
no_water_access = rawnet$no.water.access
no_toilet_access = rawnet$no.toilet.access
distances = rawnet$distances # 851-851
## initial condition
node_in=c(428, 432) #initially infected node
in_prevalence=0.001 #initial prevalence of symptomatic infected
#initial condition row: state variables, column: node
#state variables 1:Susceptible, 2:Infected, 3:recovered, 4:Baceria conc., 5:cumulative cases
initial_infected=round(POP_node[node_in]*in_prevalence)
initial_recovered=round(((1-sigma)/sigma)*initial_infected)
y0=matrix(0, 5, nnodes)
y0[1,]=POP_node  #susceptible
y0[1,node_in]=y0[1,node_in]-(initial_infected+initial_recovered)
y0[2,node_in]=initial_infected
y0[3,node_in]=initial_recovered
y0[4,node_in]=theta[node_in]*in_prevalence/mu_B  #bacteria concentration in equilibrium with infected individuals
y0[5,node_in]=initial_infected
# time for simulation [day]
time_sim=seq(0, 100, by=0.1)
# source function files
dir.rfiles <- "/Users/lijun/Documents/source_detect_2020/storage/"
rawnet <- readMat(paste0(dir.rfiles, "KZN_dataset.mat"))
## (3) prepare trained data as input, simulator
POP_node = round(rawnet$POP.node) # use integer number
nnodes=length(POP_node) # number of nodes
mu=1/(65*365)      #population natality and mortality rate (day^-1)
gamma=0.2          #rate at which people recover from cholera (day^-1)
alpha=0            #cholera induced mortality rate (day^-1)
mu_B=0.2           #death rate of V.cholerae in the aquatic environment (day^-1)
rho=0              #immunity loss rate (day^-1)
beta_max=1         #maximum contact contact rate (day^-1)
sigma=0.05         #symptomatic ratio: fraction of infected people that develop symptoms and are infective. The remaining fraction enters directly the recovered compartment
R0_max=20          #maximum reproduction number
D=50
m=0.3
no_water_access = rawnet$no.water.access
no_toilet_access = rawnet$no.toilet.access
distances = rawnet$distances # 851-851
## initial condition
node_in=c(428, 432) #initially infected node
in_prevalence=0.001 #initial prevalence of symptomatic infected
# time for simulation [day]
time_sim=seq(0, 100, by=0.1)
theta_max=R0_max*(mu_B)*(gamma+alpha+mu)/(beta_max*sigma) #maximum contamination rate
beta=beta_max*no_water_access
theta=theta_max*no_toilet_access
R0=theta*beta*sigma/(mu_B*(gamma+alpha+mu))
pop_matrix=matrix(0, 851, 851)
diag(pop_matrix)=POP_node
fluxes=exp(-distances/D)%*%pop_matrix
diag(fluxes)=0
mat_rowsum_flux = matrix(rep(rowSums(fluxes), 851), 851, 851)
fluxes=fluxes/mat_rowsum_flux
initial_infected=round(POP_node[node_in]*in_prevalence)
initial_recovered=round(((1-sigma)/sigma)*initial_infected)
y0=matrix(0, 5, nnodes)
y0[1,]=POP_node  #susceptible
y0[1,node_in]=y0[1,node_in]-(initial_infected+initial_recovered)
y0[2,node_in]=initial_infected
y0[3,node_in]=initial_recovered
y0[4,node_in]=theta[node_in]*in_prevalence/mu_B  #bacteria concentration in equilibrium with infected individuals
y0[5,node_in]=initial_infected
POP_node_SS=POP_node    #population for the stochastic simulator
POP=sum(POP_node_SS);   #total population
S=y0[1, ]
sumS=sum(S) # susceptibles
I=y0[2, ]
sumI=sum(I) # Infected
R=y0[3, ]
sumR=sum(R) # recovered
cumcase=y0[5, ]   # cumulative cases
B=y0[4, ]         # Bacteria concentration
POP_node_SS
POP
S
sumS
I
sumI
R
sumR
cumcase
B
beat
beta
B
m
(1-m)*beta*B/(1+B)
sum((1-m)*beta*B/(1+B))
beta*B/(B+1))*m
(beta*B/(B+1))*m
## initial values
FORCE=((1-m)*beta*B/(1+B)+fluxes%*%(beta*B/(B+1))*m)  #force of infection for each node
FORCE
INFECTION=FORCE*S;                                    #infection rate for each node
INFECTION
sumINF=sum(INFECTION) # sum of infection rates
sumINF
t=time_sim[1] # time
t_prev=t # previous time at which B was updated
index_t=1
t
t_prev
index_t
I_node_t_SS=matrix(0, nnodes, length(time_sim)) # infected for ech node and time point
cumcases_node_t_SS=matrix(0, nnodes, length(time_sim)) # cumulative cases for ech node and time point
I_node_t_SS[, index_t]=I
cumcases_node_t_SS[, index_t]=cumcase # initial value
event_rate=c(sumINF*(1-sigma), sumINF*(sigma), sumI*gamma, sumR*rho,
POP*mu, POP*mu, sumI*alpha)  #total rate for the seven types of events
event_rate
runif(0, 1)
runif(1, 0, 1)
runif(1, 0, 1)
runif(1, 0, 1)
runif(1, 0, 1)
runif(1, 0, 1)
runif(1, 0, 1)
deltat=-log(runif(1, 0, 1))/sum(event_rate);  #timestep to the next event
deltat
deltat=-log(runif(1, 0, 1))/sum(event_rate);  #timestep to the next event
deltat=-log(runif(1, 0, 1))/sum(event_rate);  #timestep to the next event
deltat
event_rate
sample(1:7, size=1, prob = event_rate)
sample(1:7, size=1, prob = event_rate)
sample(1:7, size=1, prob = event_rate)
sample(1:7, size=1, prob = event_rate)
event=sample(1:7, size=1, prob = event_rate)
event
INFECTION
node=sample(1:length(INFECTION), size = 1, prob = INFECTION)
node
S
node=sample(1:length(INFECTION), size = 1, prob = INFECTION)
# update variables
S[node]=S[node]-1
R[node]=R[node]+1
sumS=sumS-1
sumR=sumR+1
INFECTION[node]=INFECTION[node]-FORCE[node]
sumINF=sumINF-FORCE[node]
node
sumINF
node=sample(1:length(INFECTION), size = 1, prob = INFECTION)
# update variables
S[node]=S[node]-1
I[node]=I[node]+1
cumcase[node] = cumcase[node]+1
sumS=sumS-1
sumI=sumI+1
INFECTION[node]=INFECTION[node]-FORCE[node]
sumINF=sumINF-FORCE[node]
node=sample(1:length(INFECTION), size = 1, prob = I)
node=sample(1:length(INFECTION), size = 1, prob = I)
I[node]=I[node]-1
R[node]=R[node]+1
sumI=sumI-1
sumR=sumR+1
node=sample(1:length(INFECTION), size = 1, prob = POP_node_SS)
S[node]=S[node]+1
POP_node_SS[node]=POP_node_SS[node]+1
sumS=sumS+1
POP=POP+1
INFECTION[node]=INFECTION[node]+FORCE[node]
sumINF=sumINF+FORCE[node]
# source function files
dir.rfiles <- "/Users/lijun/Documents/source_detect_2020/storage/"
file.list <- c('compute_mu_lambda_raw.R', 'infer_source_bayesian_raw.R')
for (i in 1:length(file.list)){
source(paste0(dir.rfiles, file.list[i]))
}
# required libraries
library(mvtnorm)
library(corpcor)
## (1) prepare inputs for 'compute.mu.lambda'
load(paste0(dir.rfiles, "timemin_datamat_list_train_threspercent_851.rda"))
load(paste0(dir.rfiles, "obs9deg_before400_042220_01_original.rda"))
train.data <- timemin.datamat.list.train.threspercent.851 # 851 elements, each 300 * 851
obs.vec <- obs9.puredegree
candidate.thres <- 0.3
result1 <- compute.mu.lambda(train.data, obs.vec, candidate.thres)
# > names(result1)
# [1] "mu.mat"             "lambda.list"        "poss.candidate.vec"
## (2) prepare inputs for 'infer.source.bayesian'
library(R.matlab)
rawnet <- readMat(paste0(dir.rfiles, "KZN_dataset.mat"))
R0 <- readMat(paste0(dir.rfiles, "R0.mat"))$R0
cases.node.day <- rawnet$cases.node.day # 851 1312
thres.vec <- round(rawnet$POP.node) * 0.001
obs.vec <- obs9.puredegree
mu.mat <- result1$mu.mat
lambda.list <- result1$lambda.list
poss.candidate.vec <- result1$poss.candidate.vec
prior <- R0
result2.df <- infer.source.bayesian(cases.node.day,
thres.vec,
obs.vec,
mu.mat, lambda.list,
poss.candidate.vec,
prior, TRUE)
# "result2.df"
# cols: "probab", "nodes", ranked decreased
## (3) prepare trained data as input, simulator
POP_node = round(rawnet$POP.node) # use integer number
nnodes=length(POP_node) # number of nodes
mu=1/(65*365)      #population natality and mortality rate (day^-1)
gamma=0.2          #rate at which people recover from cholera (day^-1)
alpha=0            #cholera induced mortality rate (day^-1)
mu_B=0.2           #death rate of V.cholerae in the aquatic environment (day^-1)
rho=0              #immunity loss rate (day^-1)
beta_max=1         #maximum contact contact rate (day^-1)
sigma=0.05         #symptomatic ratio: fraction of infected people that develop symptoms and are infective. The remaining fraction enters directly the recovered compartment
R0_max=20          #maximum reproduction number
D=50
m=0.3
no_water_access = rawnet$no.water.access
no_toilet_access = rawnet$no.toilet.access
distances = rawnet$distances # 851-851
## initial condition
node_in=c(428, 432) #initially infected node
in_prevalence=0.001 #initial prevalence of symptomatic infected
## time for simulation [day]
time_sim=seq(0, 100, by=0.1)
##
theta_max=R0_max*(mu_B)*(gamma+alpha+mu)/(beta_max*sigma) #maximum contamination rate
beta=beta_max*no_water_access
theta=theta_max*no_toilet_access
R0=theta*beta*sigma/(mu_B*(gamma+alpha+mu))
pop_matrix=matrix(0, 851, 851)
diag(pop_matrix)=POP_node
fluxes=exp(-distances/D)%*%pop_matrix
diag(fluxes)=0
mat_rowsum_flux = matrix(rep(rowSums(fluxes), 851), 851, 851)
fluxes=fluxes/mat_rowsum_flux
rowSums(fluxes)
load("~/Desktop/plos_one_data.rda")
rowSums(time.of.arrival)
max(time.of.arrival)
dir.rfiles <- "/Users/lijun/Documents/source_detect_2020/storage/"
load(paste0(dir.rfiles, "plos_one_data.rda"))
load(paste0(dir.rfiles, "plos_one_data.rda"))
dir.rfiles <- "/Users/lijun/Documents/source_detect_2020/storage/"
load(paste0(dir.rfiles, "plos_one_data.rda"))
newcases.per.day <- time.of.arrival
rm(list=c("time.of.arrival"))
save.image(paste0(dir.rfiles, "plos_one_data.rda"))
load(paste0(dir.rfiles, "plos_one_data.rda"))
dir.rfiles <- "/Users/lijun/Documents/source_detect_2020/storage/"
load(paste0(dir.rfiles, "plos_one_data.rda"))
lati.long.851
27814.49 - 26410.13
1404.36/4
install.packages("rlang")
library(devtools)
library(roxygen2)
dir.rfiles <- "/Users/lijun/Documents/GitHub/NetOrigin3"
setwd(dir.rfiles)
document()
setwd(dir.rfiles)
document()
setwd(dir.rfiles)
document()
dir.rfiles <- "/Users/lijun/Documents/GitHub/NetOrigin"
setwd(dir.rfiles)
document()
